/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.lang.resolve.lazy;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.jet.JUnit3RunnerWithInners;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/lazyResolve/recursiveComparator")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class LazyResolveRecursiveComparingTestGenerated extends AbstractLazyResolveRecursiveComparingTest {
    public void testAllFilesPresentInRecursiveComparator() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/lazyResolve/recursiveComparator"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("AnnotationOnObject.kt")
    public void testAnnotationOnObject() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/AnnotationOnObject.kt");
        doTest(fileName);
    }

    @TestMetadata("classObjectHeader.kt")
    public void testClassObjectHeader() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/classObjectHeader.kt");
        doTest(fileName);
    }

    @TestMetadata("CyclicHierarchy.kt")
    public void testCyclicHierarchy() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/CyclicHierarchy.kt");
        doTest(fileName);
    }

    @TestMetadata("fileDependencyRecursion.kt")
    public void testFileDependencyRecursion() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/fileDependencyRecursion.kt");
        doTest(fileName);
    }

    @TestMetadata("importFunctionWithAllUnderImport.kt")
    public void testImportFunctionWithAllUnderImport() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/importFunctionWithAllUnderImport.kt");
        doTest(fileName);
    }

    @TestMetadata("importFunctionWithAllUnderImportAfterNamedImport.kt")
    public void testImportFunctionWithAllUnderImportAfterNamedImport() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/importFunctionWithAllUnderImportAfterNamedImport.kt");
        doTest(fileName);
    }

    @TestMetadata("InnerClassNameClash.kt")
    public void testInnerClassNameClash() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/InnerClassNameClash.kt");
        doTest(fileName);
    }

    @TestMetadata("OverrideWithErrors.kt")
    public void testOverrideWithErrors() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/OverrideWithErrors.kt");
        doTest(fileName);
    }

    @TestMetadata("propertyClassFileDependencyRecursion.kt")
    public void testPropertyClassFileDependencyRecursion() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/propertyClassFileDependencyRecursion.kt");
        doTest(fileName);
    }

    @TestMetadata("resolveFunctionInsideClassObject.kt")
    public void testResolveFunctionInsideClassObject() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/resolveFunctionInsideClassObject.kt");
        doTest(fileName);
    }

    @TestMetadata("sameClassNameResolve.kt")
    public void testSameClassNameResolve() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/sameClassNameResolve.kt");
        doTest(fileName);
    }

    @TestMetadata("simpleClass.kt")
    public void testSimpleClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/simpleClass.kt");
        doTest(fileName);
    }

    @TestMetadata("UnresolvedAnnotationOnObject.kt")
    public void testUnresolvedAnnotationOnObject() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/UnresolvedAnnotationOnObject.kt");
        doTest(fileName);
    }

    @TestMetadata("varargIterator.kt")
    public void testVarargIterator() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/varargIterator.kt");
        doTest(fileName);
    }

    @TestMetadata("WrongAnnotationArgsOnObject.kt")
    public void testWrongAnnotationArgsOnObject() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/lazyResolve/recursiveComparator/WrongAnnotationArgsOnObject.kt");
        doTest(fileName);
    }
}
